//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /archive/ARCHIVE/sources/bix/src/bixc/BixLexer.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BixLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAL=1, STR_VAL=2, INT_VAL=3, FLT_VAL=4, ASSIGN=5, TERMINATOR=6, COMMA=7, 
		LPAREN=8, RPAREN=9, LBRACE=10, RBRACE=11, HASH=12, IDENTIFIER=13, WHITESPACE=14, 
		COMMENT=15, LINE_COMMENT=16;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"VAL", "STR_VAL", "INT_VAL", "FLT_VAL", "ASSIGN", "TERMINATOR", "COMMA", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "HASH", "IDENTIFIER", "WHITESPACE", 
		"COMMENT", "LINE_COMMENT"
	};


	public BixLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BixLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'val'", null, null, null, "'='", null, "','", "'('", "')'", "'{'", 
		"'}'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAL", "STR_VAL", "INT_VAL", "FLT_VAL", "ASSIGN", "TERMINATOR", 
		"COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "HASH", "IDENTIFIER", 
		"WHITESPACE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BixLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BixLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x12', '\x7F', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '*', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '-', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x5', '\x4', '\x32', '\n', '\x4', '\x3', '\x4', '\x6', '\x4', 
		'\x35', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x36', '\x3', '\x5', 
		'\x5', '\x5', ':', '\n', '\x5', '\x3', '\x5', '\x6', '\x5', '=', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', '>', '\x3', '\x5', '\x3', '\x5', '\a', 
		'\x5', '\x43', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x46', '\v', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', 'M', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		']', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '`', '\v', '\xE', '\x3', 
		'\xF', '\x6', '\xF', '\x63', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x64', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', 'm', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 
		'p', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 'y', 
		'\n', '\x11', '\f', '\x11', '\xE', '\x11', '|', '\v', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', 'n', '\x2', '\x12', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', 
		'\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '\x3', '\x2', '\a', 
		'\x6', '\x2', '\f', '\f', '\xF', '\xF', '$', '$', '^', '^', '\x5', '\x2', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', ';', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x4', '\x2', '\v', '\v', '\"', 
		'\"', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x2', '\x89', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '#', '\x3', '\x2', '\x2', '\x2', '\x5', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\a', '\x31', '\x3', '\x2', '\x2', '\x2', '\t', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\v', 'G', '\x3', '\x2', '\x2', '\x2', '\r', 
		'L', '\x3', '\x2', '\x2', '\x2', '\xF', 'N', '\x3', '\x2', '\x2', '\x2', 
		'\x11', 'P', '\x3', '\x2', '\x2', '\x2', '\x13', 'R', '\x3', '\x2', '\x2', 
		'\x2', '\x15', 'T', '\x3', '\x2', '\x2', '\x2', '\x17', 'V', '\x3', '\x2', 
		'\x2', '\x2', '\x19', 'X', '\x3', '\x2', '\x2', '\x2', '\x1B', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x62', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'h', '\x3', '\x2', '\x2', '\x2', '!', 'v', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\a', 'x', '\x2', '\x2', '$', '%', '\a', '\x63', '\x2', '\x2', 
		'%', '&', '\a', 'n', '\x2', '\x2', '&', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\'', '+', '\a', '$', '\x2', '\x2', '(', '*', '\n', '\x2', '\x2', '\x2', 
		')', '(', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\a', '$', '\x2', '\x2', '/', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x32', '\a', '/', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\x4', '\x32', ';', '\x2', 
		'\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\x38', ':', '\a', '/', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x3', '\x2', 
		'\x2', '\x2', ';', '=', '\x4', '\x32', ';', '\x2', '<', ';', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', 
		'\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x44', '\a', '\x30', '\x2', '\x2', '\x41', '\x43', 
		'\x4', '\x32', ';', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x46', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\a', '?', '\x2', '\x2', 'H', '\f', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', '\xF', '\x2', '\x2', 'J', 'M', '\a', '\f', '\x2', '\x2', 
		'K', 'M', '\a', '\f', '\x2', '\x2', 'L', 'I', '\x3', '\x2', '\x2', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', '\xE', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\a', '.', '\x2', '\x2', 'O', '\x10', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\a', '*', '\x2', '\x2', 'Q', '\x12', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', '+', '\x2', '\x2', 'S', '\x14', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\a', '}', '\x2', '\x2', 'U', '\x16', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '\x7F', '\x2', '\x2', 'W', '\x18', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '%', '\x2', '\x2', 'Y', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '^', '\t', '\x3', '\x2', '\x2', '[', ']', '\t', '\x4', 
		'\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x1C', '\x3', '\x2', '\x2', '\x2', '`', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x61', '\x63', '\t', '\x5', '\x2', '\x2', 
		'\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x66', 'g', '\b', '\xF', '\x2', '\x2', 'g', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\a', '%', '\x2', '\x2', 'i', 'j', '\a', ',', '\x2', 
		'\x2', 'j', 'n', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\v', '\x2', '\x2', 
		'\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', ',', '\x2', '\x2', 'r', 's', '\a', '%', '\x2', 
		'\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\b', '\x10', '\x2', 
		'\x2', 'u', ' ', '\x3', '\x2', '\x2', '\x2', 'v', 'z', '\a', '%', '\x2', 
		'\x2', 'w', 'y', '\n', '\x6', '\x2', '\x2', 'x', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '}', '\x3', '\x2', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '~', '\b', '\x11', '\x2', 
		'\x2', '~', '\"', '\x3', '\x2', '\x2', '\x2', '\xE', '\x2', '+', '\x31', 
		'\x36', '\x39', '>', '\x44', 'L', '^', '\x64', 'n', 'z', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
