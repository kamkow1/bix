//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /archive/ARCHIVE/sources/bix/src/bixc/BixParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BixParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAL=1, FNC=2, CLASS=3, STR_VAL=4, INT_VAL=5, FLT_VAL=6, ASSIGN=7, TERMINATOR=8, 
		COMMA=9, LPAREN=10, RPAREN=11, LBRACE=12, RBRACE=13, HASH=14, IDENTIFIER=15, 
		WHITESPACE=16, COMMENT=17, LINE_COMMENT=18;
	public const int
		RULE_parse = 0, RULE_file_content = 1, RULE_block = 2, RULE_class = 3, 
		RULE_method = 4, RULE_statement = 5, RULE_assign_variable = 6, RULE_expression = 7, 
		RULE_constant = 8;
	public static readonly string[] ruleNames = {
		"parse", "file_content", "block", "class", "method", "statement", "assign_variable", 
		"expression", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'val'", "'fnc'", "'class'", null, null, null, "'='", null, "','", 
		"'('", "')'", "'{'", "'}'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAL", "FNC", "CLASS", "STR_VAL", "INT_VAL", "FLT_VAL", "ASSIGN", 
		"TERMINATOR", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "HASH", 
		"IDENTIFIER", "WHITESPACE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BixParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BixParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BixParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BixParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public File_contentContext file_content() {
			return GetRuleContext<File_contentContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(BixParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; file_content();
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_contentContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public File_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_content; } }
	}

	[RuleVersion(0)]
	public File_contentContext file_content() {
		File_contentContext _localctx = new File_contentContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAL) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL))) != 0)) {
				{
				{
				State = 21; statement();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode RBRACE() { return GetToken(BixParser.RBRACE, 0); }
		public ITerminalNode LBRACE() { return GetToken(BixParser.LBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; Match(RBRACE);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAL) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL))) != 0)) {
				{
				{
				State = 28; statement();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34; Match(LBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(BixParser.CLASS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(BixParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 6, RULE_class);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(CLASS);
			State = 37; Match(IDENTIFIER);
			State = 38; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode FNC() { return GetToken(BixParser.FNC, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(BixParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BixParser.IDENTIFIER, i);
		}
		public ITerminalNode LPAREN() { return GetToken(BixParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(BixParser.RPAREN, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(BixParser.COMMA, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 8, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(FNC);
			State = 41; Match(IDENTIFIER);
			State = 42; Match(LPAREN);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 43; Match(IDENTIFIER);
				{
				State = 44; Match(COMMA);
				State = 45; Match(IDENTIFIER);
				}
				}
			}

			State = 48; Match(RPAREN);
			State = 49; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TERMINATOR() { return GetToken(BixParser.TERMINATOR, 0); }
		public Assign_variableContext assign_variable() {
			return GetRuleContext<Assign_variableContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STR_VAL:
			case INT_VAL:
			case FLT_VAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51; expression();
				State = 52; Match(TERMINATOR);
				}
				break;
			case VAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; assign_variable();
				State = 55; Match(TERMINATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variableContext : ParserRuleContext {
		public ITerminalNode VAL() { return GetToken(BixParser.VAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(BixParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(BixParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable; } }
	}

	[RuleVersion(0)]
	public Assign_variableContext assign_variable() {
		Assign_variableContext _localctx = new Assign_variableContext(Context, State);
		EnterRule(_localctx, 12, RULE_assign_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(VAL);
			State = 60; Match(IDENTIFIER);
			State = 61; Match(ASSIGN);
			State = 62; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode STR_VAL() { return GetToken(BixParser.STR_VAL, 0); }
		public ITerminalNode INT_VAL() { return GetToken(BixParser.INT_VAL, 0); }
		public ITerminalNode FLT_VAL() { return GetToken(BixParser.FLT_VAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 16, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', 'G', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\x19', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x1C', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', ' ', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '#', '\v', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x31', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '<', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x2', '\x2', '\v', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', '\x3', 
		'\x3', '\x2', '\x6', '\b', '\x2', '\x41', '\x2', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\b', '&', '\x3', '\x2', '\x2', '\x2', '\n', 
		'*', '\x3', '\x2', '\x2', '\x2', '\f', ';', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '=', '\x3', '\x2', '\x2', '\x2', '\x10', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x44', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', 
		'\x5', '\x4', '\x3', '\x2', '\x15', '\x16', '\a', '\x2', '\x2', '\x3', 
		'\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x19', '\x5', '\f', 
		'\a', '\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', '!', 
		'\a', '\xF', '\x2', '\x2', '\x1E', ' ', '\x5', '\f', '\a', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\a', '\xE', '\x2', '\x2', '%', '\a', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\a', '\x5', '\x2', '\x2', '\'', '(', '\a', '\x11', 
		'\x2', '\x2', '(', ')', '\x5', '\x6', '\x4', '\x2', ')', '\t', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\a', '\x4', '\x2', '\x2', '+', ',', '\a', 
		'\x11', '\x2', '\x2', ',', '\x30', '\a', '\f', '\x2', '\x2', '-', '.', 
		'\a', '\x11', '\x2', '\x2', '.', '/', '\a', '\v', '\x2', '\x2', '/', '\x31', 
		'\a', '\x11', '\x2', '\x2', '\x30', '-', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\a', '\r', '\x2', '\x2', '\x33', '\x34', '\x5', 
		'\x6', '\x4', '\x2', '\x34', '\v', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x5', '\x10', '\t', '\x2', '\x36', '\x37', '\a', '\n', '\x2', 
		'\x2', '\x37', '<', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x5', 
		'\xE', '\b', '\x2', '\x39', ':', '\a', '\n', '\x2', '\x2', ':', '<', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x35', '\x3', '\x2', '\x2', '\x2', ';', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '<', '\r', '\x3', '\x2', '\x2', '\x2', '=', 
		'>', '\a', '\x3', '\x2', '\x2', '>', '?', '\a', '\x11', '\x2', '\x2', 
		'?', '@', '\a', '\t', '\x2', '\x2', '@', '\x41', '\x5', '\x10', '\t', 
		'\x2', '\x41', '\xF', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x5', 
		'\x12', '\n', '\x2', '\x43', '\x11', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\t', '\x2', '\x2', '\x2', '\x45', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x1A', '!', '\x30', ';',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
