//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /archive/ARCHIVE/sources/bix/src/bixc/BixParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BixParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAL=1, FNC=2, CLASS=3, STR_VAL=4, INT_VAL=5, FLT_VAL=6, ASSIGN=7, TERMINATOR=8, 
		COMMA=9, LPAREN=10, RPAREN=11, LBRACE=12, RBRACE=13, HASH=14, IDENTIFIER=15, 
		WHITESPACE=16, COMMENT=17, LINE_COMMENT=18;
	public const int
		RULE_parse = 0, RULE_file_content = 1, RULE_statement = 2, RULE_assign_variable = 3, 
		RULE_expression = 4, RULE_constant = 5;
	public static readonly string[] ruleNames = {
		"parse", "file_content", "statement", "assign_variable", "expression", 
		"constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'val'", "'fnc'", "'class'", null, null, null, "'='", null, "','", 
		"'('", "')'", "'{'", "'}'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAL", "FNC", "CLASS", "STR_VAL", "INT_VAL", "FLT_VAL", "ASSIGN", 
		"TERMINATOR", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "HASH", 
		"IDENTIFIER", "WHITESPACE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BixParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BixParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BixParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BixParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public File_contentContext file_content() {
			return GetRuleContext<File_contentContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(BixParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; file_content();
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_contentContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public File_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_content; } }
	}

	[RuleVersion(0)]
	public File_contentContext file_content() {
		File_contentContext _localctx = new File_contentContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAL) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL))) != 0)) {
				{
				{
				State = 15; statement();
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TERMINATOR() { return GetToken(BixParser.TERMINATOR, 0); }
		public Assign_variableContext assign_variable() {
			return GetRuleContext<Assign_variableContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STR_VAL:
			case INT_VAL:
			case FLT_VAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; expression();
				State = 22; Match(TERMINATOR);
				}
				break;
			case VAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 24; assign_variable();
				State = 25; Match(TERMINATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variableContext : ParserRuleContext {
		public ITerminalNode VAL() { return GetToken(BixParser.VAL, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(BixParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(BixParser.ASSIGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable; } }
	}

	[RuleVersion(0)]
	public Assign_variableContext assign_variable() {
		Assign_variableContext _localctx = new Assign_variableContext(Context, State);
		EnterRule(_localctx, 6, RULE_assign_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(VAL);
			State = 30; Match(IDENTIFIER);
			State = 31; Match(ASSIGN);
			State = 32; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode STR_VAL() { return GetToken(BixParser.STR_VAL, 0); }
		public ITerminalNode INT_VAL() { return GetToken(BixParser.INT_VAL, 0); }
		public ITerminalNode FLT_VAL() { return GetToken(BixParser.FLT_VAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', ')', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\x13', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x16', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x1E', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x2', '\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x3', 
		'\x3', '\x2', '\x6', '\b', '\x2', '$', '\x2', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x14', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x1F', '\x3', '\x2', '\x2', '\x2', '\n', '$', 
		'\x3', '\x2', '\x2', '\x2', '\f', '&', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xF', '\x5', '\x4', '\x3', '\x2', '\xF', '\x10', '\a', '\x2', '\x2', 
		'\x3', '\x10', '\x3', '\x3', '\x2', '\x2', '\x2', '\x11', '\x13', '\x5', 
		'\x6', '\x4', '\x2', '\x12', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x14', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x5', '\n', '\x6', '\x2', '\x18', '\x19', '\a', '\n', '\x2', 
		'\x2', '\x19', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x5', 
		'\b', '\x5', '\x2', '\x1B', '\x1C', '\a', '\n', '\x2', '\x2', '\x1C', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x3', '\x2', '\x2', ' ', '!', 
		'\a', '\x11', '\x2', '\x2', '!', '\"', '\a', '\t', '\x2', '\x2', '\"', 
		'#', '\x5', '\n', '\x6', '\x2', '#', '\t', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\x5', '\f', '\a', '\x2', '%', '\v', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\t', '\x2', '\x2', '\x2', '\'', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x14', '\x1D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
