//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /archive/ARCHIVE/sources/bix/src/bixi/BixParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class BixParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAL=1, FNC=2, CLASS=3, STR_VAL=4, INT_VAL=5, FLT_VAL=6, ASSIGN=7, TERMINATOR=8, 
		COMMA=9, LPAREN=10, RPAREN=11, LBRACE=12, RBRACE=13, COLON=14, DOT=15, 
		HASH=16, IDENTIFIER=17, WHITESPACE=18, COMMENT=19, LINE_COMMENT=20;
	public const int
		RULE_parse = 0, RULE_file_content = 1, RULE_statement = 2, RULE_lambda = 3, 
		RULE_function = 4, RULE_def_body = 5, RULE_function_call = 6, RULE_block = 7, 
		RULE_assign_variable = 8, RULE_object_property = 9, RULE_expression = 10, 
		RULE_constant = 11;
	public static readonly string[] ruleNames = {
		"parse", "file_content", "statement", "lambda", "function", "def_body", 
		"function_call", "block", "assign_variable", "object_property", "expression", 
		"constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'val'", "'func'", "'class'", null, null, null, "'='", "';'", "','", 
		"'('", "')'", "'{'", "'}'", "':'", "'.'", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAL", "FNC", "CLASS", "STR_VAL", "INT_VAL", "FLT_VAL", "ASSIGN", 
		"TERMINATOR", "COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COLON", 
		"DOT", "HASH", "IDENTIFIER", "WHITESPACE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BixParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BixParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BixParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BixParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public File_contentContext file_content() {
			return GetRuleContext<File_contentContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			file_content();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public File_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_content; } }
	}

	[RuleVersion(0)]
	public File_contentContext file_content() {
		File_contentContext _localctx = new File_contentContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAL) | (1L << FNC) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 26;
				statement();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(BixParser.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assign_variableContext assign_variable() {
			return GetRuleContext<Assign_variableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_propertyContext object_property() {
			return GetRuleContext<Object_propertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				expression();
				State = 33;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				assign_variable();
				State = 36;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38;
				object_property();
				State = 39;
				Match(TERMINATOR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 41;
				function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FNC() { return GetToken(BixParser.FNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BixParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BixParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BixParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BixParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BixParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BixParser.COMMA, i);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 6, RULE_lambda);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(FNC);
			State = 45;
			Match(LPAREN);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 46;
				Match(IDENTIFIER);
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 47;
					Match(COMMA);
					State = 48;
					Match(IDENTIFIER);
					}
					}
					State = 53;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 56;
			Match(RPAREN);
			State = 57;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FNC() { return GetToken(BixParser.FNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BixParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BixParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BixParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BixParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Def_bodyContext def_body() {
			return GetRuleContext<Def_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BixParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BixParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 8, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(FNC);
			State = 60;
			Match(IDENTIFIER);
			State = 61;
			Match(LPAREN);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 62;
				Match(IDENTIFIER);
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 63;
					Match(COMMA);
					State = 64;
					Match(IDENTIFIER);
					}
					}
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 72;
			Match(RPAREN);
			State = 73;
			def_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BixParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BixParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Def_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_body; } }
	}

	[RuleVersion(0)]
	public Def_bodyContext def_body() {
		Def_bodyContext _localctx = new Def_bodyContext(Context, State);
		EnterRule(_localctx, 10, RULE_def_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(LBRACE);
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAL) | (1L << FNC) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 76;
					statement();
					}
					}
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 84;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BixParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(BixParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(BixParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BixParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BixParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 12, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(IDENTIFIER);
			State = 87;
			Match(LPAREN);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FNC) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 88;
				expression();
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 89;
					Match(COMMA);
					State = 90;
					expression();
					}
					}
					State = 95;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 98;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(BixParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(BixParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(LBRACE);
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VAL) | (1L << FNC) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 101;
					statement();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 109;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_variableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAL() { return GetToken(BixParser.VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BixParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BixParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(BixParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assign_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_variable; } }
	}

	[RuleVersion(0)]
	public Assign_variableContext assign_variable() {
		Assign_variableContext _localctx = new Assign_variableContext(Context, State);
		EnterRule(_localctx, 16, RULE_assign_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(VAL);
			State = 112;
			Match(IDENTIFIER);
			State = 113;
			Match(IDENTIFIER);
			State = 114;
			Match(ASSIGN);
			State = 115;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(BixParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(BixParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(BixParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(BixParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(BixParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(BixParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(BixParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(BixParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(BixParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(BixParser.COMMA, i);
		}
		public Object_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_property; } }
	}

	[RuleVersion(0)]
	public Object_propertyContext object_property() {
		Object_propertyContext _localctx = new Object_propertyContext(Context, State);
		EnterRule(_localctx, 18, RULE_object_property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(IDENTIFIER);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				State = 134;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					{
					State = 118;
					Match(DOT);
					State = 119;
					Match(IDENTIFIER);
					}
					}
					break;
				case 2:
					{
					{
					State = 120;
					Match(DOT);
					State = 121;
					Match(IDENTIFIER);
					State = 122;
					Match(LPAREN);
					State = 131;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FNC) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << IDENTIFIER))) != 0)) {
						{
						State = 123;
						expression();
						State = 128;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 124;
							Match(COMMA);
							State = 125;
							expression();
							}
							}
							State = 130;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					State = 133;
					Match(RPAREN);
					}
					}
					break;
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(BixParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ObjectProtertyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Object_propertyContext object_property() {
			return GetRuleContext<Object_propertyContext>(0);
		}
		public ObjectProtertyExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_expression);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 139;
				constant();
				}
				break;
			case 2:
				_localctx = new LambdaExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 140;
				lambda();
				}
				break;
			case 3:
				_localctx = new FunctionCallExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 141;
				function_call();
				}
				break;
			case 4:
				_localctx = new IdentifierExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 142;
				Match(IDENTIFIER);
				}
				break;
			case 5:
				_localctx = new ObjectProtertyExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 143;
				object_property();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_VAL() { return GetToken(BixParser.STR_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_VAL() { return GetToken(BixParser.INT_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLT_VAL() { return GetToken(BixParser.FLT_VAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 22, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', '\x97', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\a', '\x3', '\x1E', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '!', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '-', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x34', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x37', '\v', '\x5', '\x5', '\x5', 
		'\x39', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x44', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'G', 
		'\v', '\x6', '\x5', '\x6', 'I', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', 'P', '\n', '\a', '\f', 
		'\a', '\xE', '\a', 'S', '\v', '\a', '\x5', '\a', 'U', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '^', '\n', '\b', '\f', '\b', '\xE', '\b', '\x61', 
		'\v', '\b', '\x5', '\b', '\x63', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', 'i', '\n', '\t', '\f', '\t', '\xE', 
		'\t', 'l', '\v', '\t', '\x5', '\t', 'n', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\x81', '\n', '\v', '\f', '\v', '\xE', '\v', '\x84', '\v', '\v', '\x5', 
		'\v', '\x86', '\n', '\v', '\x3', '\v', '\a', '\v', '\x89', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\x8C', '\v', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x93', '\n', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x2', '\x2', '\xE', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x2', '\x3', '\x3', '\x2', '\x6', '\b', '\x2', '\xA0', '\x2', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x6', ',', '\x3', '\x2', '\x2', '\x2', '\b', '.', '\x3', '\x2', '\x2', 
		'\x2', '\n', '=', '\x3', '\x2', '\x2', '\x2', '\f', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'X', '\x3', '\x2', '\x2', '\x2', '\x10', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'q', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x16', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x94', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1B', '\x5', 
		'\x4', '\x3', '\x2', '\x1B', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1E', '\x5', '\x6', '\x4', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x5', '\x16', '\f', '\x2', '#', '$', '\a', '\n', '\x2', '\x2', '$', 
		'-', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x5', '\x12', '\n', '\x2', 
		'&', '\'', '\a', '\n', '\x2', '\x2', '\'', '-', '\x3', '\x2', '\x2', '\x2', 
		'(', ')', '\x5', '\x14', '\v', '\x2', ')', '*', '\a', '\n', '\x2', '\x2', 
		'*', '-', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x5', '\n', '\x6', '\x2', 
		',', '\"', '\x3', '\x2', '\x2', '\x2', ',', '%', '\x3', '\x2', '\x2', 
		'\x2', ',', '(', '\x3', '\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', 
		'\x2', '-', '\a', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x4', '\x2', 
		'\x2', '/', '\x38', '\a', '\f', '\x2', '\x2', '\x30', '\x35', '\a', '\x13', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\v', '\x2', '\x2', '\x32', '\x34', 
		'\a', '\x13', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x30', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', 
		'\r', '\x2', '\x2', ';', '<', '\x5', '\x10', '\t', '\x2', '<', '\t', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\a', '\x4', '\x2', '\x2', '>', '?', '\a', 
		'\x13', '\x2', '\x2', '?', 'H', '\a', '\f', '\x2', '\x2', '@', '\x45', 
		'\a', '\x13', '\x2', '\x2', '\x41', '\x42', '\a', '\v', '\x2', '\x2', 
		'\x42', '\x44', '\a', '\x13', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'H', '@', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '\r', '\x2', 
		'\x2', 'K', 'L', '\x5', '\f', '\a', '\x2', 'L', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'T', '\a', '\xE', '\x2', '\x2', 'N', 'P', '\x5', '\x6', '\x4', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\xF', '\x2', 
		'\x2', 'W', '\r', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x13', 
		'\x2', '\x2', 'Y', '\x62', '\a', '\f', '\x2', '\x2', 'Z', '_', '\x5', 
		'\x16', '\f', '\x2', '[', '\\', '\a', '\v', '\x2', '\x2', '\\', '^', '\x5', 
		'\x16', '\f', '\x2', ']', '[', '\x3', '\x2', '\x2', '\x2', '^', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x3', '\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\r', '\x2', '\x2', '\x65', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x66', 'm', '\a', '\xE', '\x2', '\x2', 
		'g', 'i', '\x5', '\x6', '\x4', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 
		'i', 'l', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\a', '\xF', '\x2', '\x2', 'p', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\x3', '\x2', '\x2', 'r', 's', '\a', '\x13', '\x2', 
		'\x2', 's', 't', '\a', '\x13', '\x2', '\x2', 't', 'u', '\a', '\t', '\x2', 
		'\x2', 'u', 'v', '\x5', '\x16', '\f', '\x2', 'v', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\x8A', '\a', '\x13', '\x2', '\x2', 'x', 'y', '\a', 
		'\x11', '\x2', '\x2', 'y', '\x89', '\a', '\x13', '\x2', '\x2', 'z', '{', 
		'\a', '\x11', '\x2', '\x2', '{', '|', '\a', '\x13', '\x2', '\x2', '|', 
		'\x85', '\a', '\f', '\x2', '\x2', '}', '\x82', '\x5', '\x16', '\f', '\x2', 
		'~', '\x7F', '\a', '\v', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x16', 
		'\f', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x89', '\a', '\r', 
		'\x2', '\x2', '\x88', 'x', '\x3', '\x2', '\x2', '\x2', '\x88', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x15', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x93', '\x5', '\x18', '\r', '\x2', '\x8E', 
		'\x93', '\x5', '\b', '\x5', '\x2', '\x8F', '\x93', '\x5', '\xE', '\b', 
		'\x2', '\x90', '\x93', '\a', '\x13', '\x2', '\x2', '\x91', '\x93', '\x5', 
		'\x14', '\v', '\x2', '\x92', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x92', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x17', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x95', '\t', '\x2', '\x2', '\x2', '\x95', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x1F', ',', '\x35', '\x38', '\x45', 'H', 'Q', 'T', '_', 
		'\x62', 'j', 'm', '\x82', '\x85', '\x88', '\x8A', '\x92',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
